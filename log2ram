#!/usr/bin/env sh

. /etc/log2ram.conf

if [ -z "$PATH_DISK" ]; then
    PATH_DISK="/var/log"
fi

if [ -z "$TP_PERCENT" ]; then
    TP_PERCENT=90
fi

LOG_NAME="log2ram.log"
LOG_SEPARATOR="\n**************** $(date) ******************************************"

isSafe () {
    [ -d $HDD_LOG/ ] || echo "ERROR: $HDD_LOG/ doesn't exist! Can't sync."
    [ -d $HDD_LOG/ ] || exit 1
}

remountOriginal() {
    OPTION=$1
    mount -o remount,${OPTION} ${HDD_LOG}
}

syncToDisk () {
    isSafe

    if [ -x "$(command -v rsync)" ]; then
        rsync -aXv --inplace --no-whole-file --delete-after $RAM_LOG/ $HDD_LOG/ 2>&1 | tee -a $LOG2RAM_LOG
    else
        cp -rfupv $RAM_LOG/ -T $HDD_LOG/ 2>&1 | tee -a $LOG2RAM_LOG
        cp -v $RAM_LOG/$LOG_NAME $HDD_LOG/ 2>&1 | tee -a $LOG2RAM_LOG
    fi
}

getTpLimit(){
    echo $(( ((${TP_SIZE//[!0-9]/} * 1048576) / 100) * $TP_PERCENT ))
}


checkDiskSpace () {

    # if custom sync is declared use it to determine amount of disk required
    if [ ! -z "$CUSTOM_SYNC_FROM_DISK_FIND" ]; then
        TP_LIMIT=$(getTpLimit)
        LS_CMD='-exec ls -l  {} \;'
        SRC_SIZE=$(eval "$CUSTOM_SYNC_FROM_DISK_FIND $LS_CMD" | awk '{ sum += $5 } END { print sum }')
        if [ $SRC_SIZE -gt $TP_LIMIT ] ; then
            echo 0
            return 
        fi
    # else use standard caluclation
    elif [ ! -z "$(du -sh -t "$TP_SIZE" $HDD_LOG/ | cut -f1)" ]; then
        echo 0
        return 
    fi

    echo 1
    return

}

ramDiskTooSmall () {

    if [ ! -z "$CUSTOM_SYNC_FROM_DISK_FIND" ]; then
        echo "Attempting to cull files from copy." | tee -a $LOG2RAM_LOG
        TP_LIMIT=$(getTpLimit)
        LS_CMD='-exec ls -l  {} \;'
        eval "$CUSTOM_SYNC_FROM_DISK_FIND $LS_CMD" | sort -k 5 -n | awk -v size="$TP_LIMIT" '{ if( total + $5 > size) {system("> " $9); print "culling: " $9;} else  total += $5 } END{ print "total copy to: " total }' | tee -a $LOG2RAM_LOG

        if [ "$(checkDiskSpace)" -eq 1 ]; then 
            echo "Successful cull of files." | tee -a $LOG2RAM_LOG
            return 
        fi

    fi

    echo "ERROR: RAM disk for "$HDD_LOG/" too small. Can't sync." | tee -a $LOG2RAM_LOG
    umount -l $RAM_LOG/
    umount -l $HDD_LOG/
    if [ "$MAIL" = true ]; then
        echo "LOG2RAM : No place on RAM for "$HDD_LOG/" anymore, fallback on the disk" | mail -s 'Log2Ram Error' root 2>&1 | tee -a $LOG2RAM_LOG
    fi
    exit 1

}

syncFromDisk () {
    isSafe

    TP_SIZE=$SIZE
    if [ "$ZL2R" = true ]; then
        TP_SIZE=$LOG_DISK_SIZE
    fi

    if [ "$(checkDiskSpace)" -ne 1 ]; then ramDiskTooSmall; fi
 
    COPY_CMD='-exec cp -rfpv {} $RAM_LOG/ \;'

    if [ ! -z "$CUSTOM_SYNC_FROM_DISK_FIND" ]; then
        eval "$CUSTOM_SYNC_FROM_DISK_FIND $COPY_CMD 2>&1" | tee -a $LOG2RAM_LOG
    elif [ -x "$(command -v rsync)" ]; then
        rsync -aXv --inplace --no-whole-file --delete-after $HDD_LOG/ $RAM_LOG/ 2>&1 | tee -a $LOG2RAM_LOG
    else
        cp -rfup $HDD_LOG/ -T $RAM_LOG/ 2>&1 | tee -a $LOG2RAM_LOG
    fi

}

wait_for () {
    while ! grep -qs "$1" /proc/mounts; do
        sleep 0.1
    done
}

createZramLogDrive () {
	# Check Zram Class created
	if [ ! -d "/sys/class/zram-control" ]; then
		modprobe zram
		RAM_DEV='0'
	else
		RAM_DEV=$(cat /sys/class/zram-control/hot_add)
	fi
	echo ${COMP_ALG} > /sys/block/zram${RAM_DEV}/comp_algorithm
	echo ${LOG_DISK_SIZE} > /sys/block/zram${RAM_DEV}/disksize
	echo ${SIZE} > /sys/block/zram${RAM_DEV}/mem_limit
	mke2fs -t ext4 /dev/zram${RAM_DEV}
}

make_log_dir () {
    [ -d $HDD_LOG/ ] || mkdir $HDD_LOG/
}

doLogrotate () {
    if [ ! -z "$LOGROTATE_SYNC_CONFIG" ]; then
        logrotate -v  $LOGROTATE_SYNC_CONFIG 2>&1 | tee -a $LOG2RAM_LOG  
    fi
}

# if LOGROTATE_SYNC_CONFIG is specified then disable the logrotate timer to avoid contention
if [ ! -z "$LOGROTATE_SYNC_CONFIG" ]; then
    systemctl stop logrotate.timer
    systemctl disable logrotate.timer
fi

case "$1" in
    start)
        IFS=';'
        for i in $PATH_DISK; do
            PATH_FIRST_PART=$( echo ${i%/*} )
            PATH_LAST_PART=$( echo ${i##/*/} )
            RAM_LOG=$i
            HDD_LOG=$PATH_FIRST_PART/hdd.$PATH_LAST_PART
            LOG2RAM_LOG="${RAM_LOG}/${LOG_NAME};${HDD_LOG}/${LOG_NAME}"
            
            make_log_dir
            
            mount --bind $RAM_LOG/ $HDD_LOG/
            mount --make-private $HDD_LOG/
            wait_for $HDD_LOG

            if [ "$ZL2R" = true ]; then
                createZramLogDrive
                mount -t ext4 -o nosuid,noexec,noatime,nodev,user=log2ram /dev/zram${RAM_DEV} ${RAM_LOG}/
            else
                mount -t tmpfs -o nosuid,noexec,noatime,nodev,mode=0755,size=${SIZE} log2ram $RAM_LOG/
            fi
            wait_for $RAM_LOG

            echo -e "$LOG_SEPARATOR\n[START]log2ram startup: $PATH_DISK" | tee -a $LOG2RAM_LOG

            syncFromDisk

            echo -e "[START]log2ram startup completed: $PATH_DISK \n" | tee -a $LOG2RAM_LOG
        done
        ;;

    stop)
        IFS=';'
        for i in $PATH_DISK; do
            PATH_FIRST_PART=$( echo ${i%/*} )
            PATH_LAST_PART=$( echo ${i##/*/} )
            RAM_LOG=$i
            HDD_LOG=$PATH_FIRST_PART/hdd.$PATH_LAST_PART
            LOG2RAM_LOG="${RAM_LOG}/${LOG_NAME};${HDD_LOG}/${LOG_NAME}"
            

            echo -e "$LOG_SEPARATOR\n[STOP]log2ram stopping: $PATH_DISK" | tee -a $LOG2RAM_LOG

            doLogrotate
            syncToDisk
            #ZRAM_LOG=$(awk '$2 == "/var/log" {print $1}' /proc/mounts)
            #ZRAM_LOG=$(echo ${ZRAM_LOG} | grep -o -E '[0-9]+')
            umount -l $RAM_LOG/
            umount -l $HDD_LOG/
            # Unsure as even with Root permision denied
            #echo ${ZRAM_LOG} > /sys/class/zram-control/hot_remove

            echo -e "[STOP]log2ram stop completed: $PATH_DISK \n" | tee -a $LOG2RAM_LOG

        done
        ;;

    write)
        IFS=';'
        for i in $PATH_DISK; do
            PATH_FIRST_PART=$( echo ${i%/*} )
            PATH_LAST_PART=$( echo ${i##/*/} )
            RAM_LOG=$i
            HDD_LOG=$PATH_FIRST_PART/hdd.$PATH_LAST_PART
            LOG2RAM_LOG="${RAM_LOG}/${LOG_NAME};${HDD_LOG}/${LOG_NAME}"
        
            echo -e "$LOG_SEPARATOR\n[WRITE]log2ram writing: $PATH_DISK" | tee -a $LOG2RAM_LOG

            doLogrotate
            syncToDisk

            echo -e "[WRITE]log2ram write completed: $PATH_DISK \n" | tee -a $LOG2RAM_LOG
        done
        ;;

    *)
        echo "Usage: log2ram {start|stop|write}" >&2
        exit 1
        ;;
esac
